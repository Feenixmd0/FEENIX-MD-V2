/** 

ùë≠ ùë¨ ùë¨ ùëµ ùë∞ ùëø-ùë¥ùë´

  ùóñùóºùóΩùòÜùóøùó∂ùó¥ùóµùòÅ (ùóñ) 2024.
 ùóüùó∂ùó∞ùó≤ùóªùòÄùó≤ùó± ùòÇùóªùó±ùó≤ùóø ùòÅùóµùó≤  ùó†ùóúùóß ùóüùó∂ùó∞ùó≤ùóªùòÄùó≤;
 ùó¨ùóºùòÇ ùó∫ùóÆùòÜ ùóªùóºùòÅ ùòÇùòÄùó≤ ùòÅùóµùó∂ùòÄ ùó≥ùó∂ùóπùó≤ ùó≤ùòÖùó∞ùó≤ùóΩùòÅ ùó∂ùóª ùó∞ùóºùó∫ùóΩùóπùó∂ùóÆùóªùó∞ùó≤ ùòÑùó∂ùòÅùóµ ùòÅùóµùó≤ ùóüùó∂ùó∞ùó≤ùóªùòÄùó≤.
 ùóúùòÅ ùó∂ùòÄ ùòÄùòÇùóΩùóΩùóπùó∂ùó≤ùó± ùó∂ùóª ùòÅùóµùó≤ ùóµùóºùóΩùó≤ ùòÅùóµùóÆùòÅ ùó∂ùòÅ ùó∫ùóÆùòÜ ùóØùó≤ ùòÇùòÄùó≤ùó≥ùòÇùóπ.
 * @ùóΩùóøùóºùó∑ùó≤ùó∞ùòÅ_ùóªùóÆùó∫ùó≤ : ùóôeenix ùó†ùóó, ùóÆ ùòÄùó∂ùó∫ùóΩùóπùó≤ ùóÆùóªùó± ùó≤ùóÆùòÄùòÜ ùó™ùóµùóÆùòÅùòÄùóîùóΩùóΩ ùòÇùòÄùó≤ùóø ùóØùóºùòÅ 
 * @ùóºùòÑùóªùó≤ùóø: ùë≤ùë®ùë∫ùëºùëµ ùë∫ùë®ùëµùë´ùë¨ùë¨ùë∑ùë® 
 
 **/






const { kasun } = require("../framework/kasun");
const yts = require('yt-search');
const ytdl = require('ytdl-core');
const fs = require('fs');
const yt=require("../framework/dl/ytdl-core.js")
const ffmpeg = require("fluent-ffmpeg");
const yts1 = require("youtube-yts");
//var fs =require("fs-extra")

kasun({
  nomCom: "play",
  categorie: "Search",
  reaction: "üíø"
}, async (origineMessage, zk, commandeOptions) => {
  const { ms, repondre, arg } = commandeOptions;
     
  if (!arg[0]) {
    repondre("wich song do you want.");
    return;
  }

  try {
    let topo = arg.join(" ")
    const search = await yts(topo);
    const videos = search.videos;

    if (videos && videos.length > 0 && videos[0]) {
      const urlElement = videos[0].url;
          
       let infoMess = {
          image: {url : videos[0]. thumbnail},
         caption : `\n*song name :* _${videos[0].title}_

*Time :* _${videos[0].timestamp}_

*Url :* _${videos[0].url}_


_*DOWNLOADING...*_\n\n`
       }

      

      

      
       zk.sendMessage(origineMessage,infoMess,{quoted:ms}) ;
      // Obtenir le flux audio de la vid√©o
      const audioStream = ytdl(urlElement, { filter: 'audioonly', quality: 'highestaudio' });

      // Nom du fichier local pour sauvegarder le fichier audio
      const filename = 'audio.mp3';

      // √âcrire le flux audio dans un fichier local
      const fileStream = fs.createWriteStream(filename);
      audioStream.pipe(fileStream);

      fileStream.on('finish', () => {
        // Envoi du fichier audio en utilisant l'URL du fichier local
      

     zk.sendMessage(origineMessage, { audio: { url:"audio.mp3"},mimetype:'audio/mp4' }, { quoted: ms,ptt: false });
        console.log("Envoi du fichier audio termin√© !");

     
      });

      fileStream.on('error', (error) => {
        console.error('Erreur lors de l\'√©criture du fichier audio :', error);
        repondre('Une erreur est survenue lors de l\'√©criture du fichier audio.');
      });
    } else {
      repondre('Aucune vid√©o trouv√©e.');
    }
  } catch (error) {
    console.error('Erreur lors de la recherche ou du t√©l√©chargement de la vid√©o :', error);
    
    repondre('Une erreur est survenue lors de la recherche ou du t√©l√©chargement de la vid√©o.');
  }
});

  

kasun({
  nomCom: "video",
  categorie: "Search",
  reaction: "üé•"
}, async (origineMessage, zk, commandeOptions) => {
  const { arg, ms, repondre } = commandeOptions;

  if (!arg[0]) {
    repondre("insert video name");
    return;
  }

  const topo = arg.join(" ");
  try {
    const search = await yts(topo);
    const videos = search.videos;

    if (videos && videos.length > 0 && videos[0]) {
      const Element = videos[0];

      let InfoMess = {
        image: { url: videos[0].thumbnail },
        caption: `*Video name :* _${Element.title}_
*Time :* _${Element.timestamp}_
*Url :* _${Element.url}_
_*DOWNLOADING...*_\n\n`
      };

      zk.sendMessage(origineMessage, InfoMess, { quoted: ms });

      // Obtenir les informations de la vid√©o √† partir du lien YouTube
      const videoInfo = await ytdl.getInfo(Element.url);
      // Format vid√©o avec la meilleure qualit√© disponible
      const format = ytdl.chooseFormat(videoInfo.formats, { quality: '18' });
      // T√©l√©charger la vid√©o
      const videoStream = ytdl.downloadFromInfo(videoInfo, { format });

      // Nom du fichier local pour sauvegarder la vid√©o
      const filename = 'video.mp4';

      // √âcrire le flux vid√©o dans un fichier local
      const fileStream = fs.createWriteStream(filename);
      videoStream.pipe(fileStream);

      fileStream.on('finish', () => {
        // Envoi du fichier vid√©o en utilisant l'URL du fichier local
        zk.sendMessage(origineMessage, { video: { url :"./video.mp4"} , caption: "*FEENIX-MD*", gifPlayback: false }, { quoted: ms });
      });

      fileStream.on('error', (error) => {
        console.error('Erreur lors de l\'√©criture du fichier vid√©o :', error);
        repondre('Une erreur est survenue lors de l\'√©criture du fichier vid√©o.');
      });
    } else {
      repondre('No video found');
    }
  } catch (error) {
    console.error('Erreur lors de la recherche ou du t√©l√©chargement de la vid√©o :', error);
    repondre('Une erreur est survenue lors de la recherche ou du t√©l√©chargement de la vid√©o.');
  }
});
